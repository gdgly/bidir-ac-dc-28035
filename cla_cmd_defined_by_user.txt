/*
//###########################################################################
//
// FILE:	F28035_CLA_C.cmd
//
// TITLE:	Linker Command File For F28035 Device
//
//###########################################################################
// $TI Release: F2803x C/C++ Header Files and Peripheral Examples V126 $
// $Release Date: November 30, 2011 $
//###########################################################################
*/

/* ======================================================
// For Code Composer Studio V2.2 and later
// ---------------------------------------
// In addition to this memory linker command file,
// add the header linker command file directly to the project.
// The header linker command file is required to link the
// peripheral structures to the proper locations within
// the memory map.
//
// The header linker files are found in <base>\DSP2803x_Headers\cmd
//
// For BIOS applications add:      DSP2803x_Headers_BIOS.cmd
// For nonBIOS applications add:   DSP2803x_Headers_nonBIOS.cmd
========================================================= */

/* ======================================================
// For Code Composer Studio prior to V2.2
// --------------------------------------
// 1) Use one of the following -l statements to include the
// header linker command file in the project. The header linker
// file is required to link the peripheral structures to the proper
// locations within the memory map                                    */

/* Uncomment this line to include file only for non-BIOS applications */
/* -l DSP2803x_Headers_nonBIOS.cmd */

/* Uncomment this line to include file only for BIOS applications */
/* -l DSP2803x_Headers_BIOS.cmd */

/* 2) In your project add the path to <base>\DSP2803x_headers\cmd to the
   library search path under project->build options, linker tab,
   library search path (-i).
/*========================================================= */

/* Define the memory block start/length for the F28035
   PAGE 0 will be used to organize program sections
   PAGE 1 will be used to organize data sections

   Notes:
         Memory blocks on F2803x are uniform (ie same
         physical memory) in both PAGE 0 and PAGE 1.
         That is the same memory region should not be
         defined for both PAGE 0 and PAGE 1.
         Doing so will result in corruption of program
         and/or data.

         L0 memory block is mirrored - that is
         it can be accessed in high memory or low memory.
         For simplicity only one instance is used in this
         linker file.

         Contiguous SARAM memory blocks or flash sectors can be
         be combined if required to create a larger memory block.
*/
_Cla1Prog_Start = _Cla1funcsRunStart;
-heap 0x200
-stack 0x200

// Define a size for the CLA scratchpad area that will be used
// by the CLA compiler for local symbols and temps
// Also force references to the special symbols that mark the
// scratchpad are. 
// CLA_SCRATCHPAD_SIZE = 0x100;
--undef_sym=__cla_scratchpad_end
--undef_sym=__cla_scratchpad_start
--diag_suppress=16002
MEMORY
{
PAGE 0:    /* Program Memory */
           /* Memory (RAM/FLASH/OTP) blocks can be moved to PAGE1 for data allocation */
   	RAML0BOOT_PRG   : origin = 0x008400, length = 0x000400
	PRAML0_isr   	: origin = 0x008000, length = 0x000300
	RAMLAPP_PRG 	: origin = 0x008300, length = 0x000100
   	RAMCLA_PRG  	: origin = 0x009000, length = 0x001000

   	OTP         : origin = 0x3D7800, length = 0x000400     /* on-chip OTP */
   	FLASHH      : origin = 0x3E8002, length = 0x00BFFC     /* on-chip FLASH *///28035
   	FLASHFLAG   : origin = 0x3F5FFF, length = 0x000001
 	FLASHNORMAL : origin = 0x3E8000, length = 0x000002
   	FLASH_BOOT  : origin = 0x3F6000, length = 0x001F80     /* on-chip FLASH */
   	CSM_RSVD    : origin = 0x3F7F80, length = 0x000076     /* Part of FLASHA.  Program with all 0x0000 when CSM is in use. */
   	BEGIN       : origin = 0x3F7FF6, length = 0x000002     /* Part of FLASHH.  28035 */
   	CSM_PWL_P0  : origin = 0x3F7FF8, length = 0x000008     /* Part of FLASHA.  CSM password locations in FLASHA */

   	IQTABLES    : origin = 0x3FE000, length = 0x000B50     /* IQ Math Tables in Boot ROM */
   	IQTABLES2   : origin = 0x3FEB50, length = 0x00008C     /* IQ Math Tables in Boot ROM */
   	IQTABLES3   : origin = 0x3FEBDC, length = 0x0000AA	  /* IQ Math Tables in Boot ROM */

   	ROM         : origin = 0x3FF27C, length = 0x000D44     /* Boot ROM */
   	RESET       : origin = 0x3FFFC0, length = 0x000002     /* part of boot ROM  */
   	VECTORS     : origin = 0x3FFFC2, length = 0x00003E     /* part of boot ROM  */

PAGE 1 :   /* Data Memory */
           /* Memory (RAM/FLASH/OTP) blocks can be moved to PAGE0 for program allocation */
           /* Registers remain on PAGE1                                                  */
   	BOOT_RSVD   : origin = 0x000000, length = 0x000040     /* Part of M0, BOOT rom will use this for stack */
   	RAMM0       : origin = 0x000080, length = 0x000780     /* on-chip RAM block M0 */
   	IsrVariable : origin = 0x00040, length = 0x000040		/* ISR variable define */
   	//RAML0       : origin = 0x3F8400, length = 0x000400     /* on-chip RAM block L0 */
   	DataRAM     : origin = 0x008800, length = 0x000400     /* on-chip RAM block L1 */
   	CLARAM1     : origin = 0x008C00, length = 0x000400
   	CLA1_MSGRAMLOW   : origin = 0x001480, length = 0x000080
   	CLA1_MSGRAMHIGH  : origin = 0x001500, length = 0x000080
   
   	FLASHB      : origin = 0x3F4000, length = 0x002000     /* on-chip FLASH */

}

/* Allocate sections to memory blocks.
   Note:
         codestart user defined section in DSP28_CodeStartBranch.asm used to redirect code
                   execution when booting to flash
         ramfuncs  user defined section to store functions that will be copied from Flash into RAM
*/

SECTIONS
{

   /* Allocate program areas: */
   code                : > FLASHH      	PAGE = 0       /*Add in*/
   .cinit              : > FLASHH      	PAGE = 0
   .pinit              : > FLASHH,     	PAGE = 0
   .text               : > FLASHH      	PAGE = 0
   .init			   : > FLASH_BOOT  	PAGE = 0
   normalfuncs		   : > FLASHNORMAL 	PAGE = 0
   codestart           : > BEGIN       	PAGE = 0

   FlashBoot           : > FLASH_BOOT  	PAGE = 0
   .flashdata 		   : > DataRAM   	PAGE = 1
   flashflag		   : > FLASHFLAG   	PAGE = 0

   Flash2803xFunc  		: LOAD = FLASH_BOOT,
                         RUN = RAML0BOOT_PRG,
                         LOAD_START(_BootRamfuncsLoadStart),
                         LOAD_END(_BootRamfuncsLoadEnd),
                         RUN_START(_BootRamfuncsRunStart),
                         PAGE = 0

   IsrRamfuncs        	: LOAD = FLASHH,
                         RUN = PRAML0_isr,
                         LOAD_START(_IsrRamfuncsLoadStart),
                         LOAD_END(_IsrRamfuncsLoadEnd),
                         RUN_START(_IsrRamfuncsRunStart),
                         PAGE = 0

   AppRamfuncs         : LOAD = FLASHH,
                        RUN = RAMLAPP_PRG,
                        LOAD_START(_AppRamfuncsLoadStart),
                        LOAD_END(_AppRamfuncsLoadEnd),
                        RUN_START(_AppRamfuncsRunStart),
                        PAGE = 0

   csmpasswds          : > CSM_PWL_P0  PAGE = 0
   csm_rsvd            : > CSM_RSVD    PAGE = 0

   /* Allocate uninitalized data sections: */
   .cio                : > RAMM0       PAGE = 1
   .sysmem             : > RAMM0       PAGE = 1
   .stack              : > RAMM0       PAGE = 1
   .ebss               : > RAMM0       PAGE = 1
   .esysmem            : > RAMM0       PAGE = 1
                     
   /* Initalized sections go in Flash */
   /* For SDFlash to program these, they must be allocated to page 0 */
   .econst             : > FLASHH      PAGE = 0
   .switch             : > FLASHH      PAGE = 0

   /* Allocate IQ math areas: */
   IQmath              : > FLASHH      PAGE = 0            /* Math Code */
   IQmathTables        : > IQTABLES,   PAGE = 0, TYPE = NOLOAD

   Cla1Prog            : LOAD = FLASHH,
                         RUN = RAMCLA_PRG,
                         LOAD_START(_Cla1funcsLoadStart),
                         LOAD_END(_Cla1funcsLoadEnd),
                         RUN_START(_Cla1funcsRunStart),
                         LOAD_SIZE(_Cla1funcsLoadSize),
                         PAGE = 0
   
   Cla1ToCpuMsgRAM     : > CLA1_MSGRAMLOW,   PAGE = 1
   CpuToCla1MsgRAM     : > CLA1_MSGRAMHIGH,  PAGE = 1
   //Cla1DataRam0		   : > CLARAM0,		  PAGE = 1
   Cla1DataRam1		   : > CLARAM1,		  	PAGE = 1
   .bss_cla            : > CLARAM1       	PAGE = 1
   
   CLA1mathTables	   : LOAD = FLASHB,
                         RUN = CLARAM1,
                         LOAD_START(_Cla1mathTablesLoadStart),
                         LOAD_END(_Cla1mathTablesLoadEnd),
                         RUN_START(_Cla1mathTablesRunStart),
                         LOAD_SIZE(_Cla1mathTablesLoadSize),
                         PAGE = 1
                     
   CLAscratch          : 
                         { *.obj(CLAscratch)
                         . += CLA_SCRATCHPAD_SIZE;
                         *.obj(CLAscratch_end) } > CLARAM1,
					     PAGE = 1
					 
  /* Uncomment the section below if calling the IQNexp() or IQexp()
      functions from the IQMath.lib library in order to utilize the
      relevant IQ Math table in Boot ROM (This saves space and Boot ROM
      is 1 wait-state). If this section is not uncommented, IQmathTables2
      will be loaded into other memory (SARAM, Flash, etc.) and will take
      up space, but 0 wait-state is possible.
   */
   /*
   IQmathTables2    : > IQTABLES2, PAGE = 0, TYPE = NOLOAD
   {

              IQmath.lib<IQNexpTable.obj> (IQmathTablesRam)

   }
   */
    /* Uncomment the section below if calling the IQNasin() or IQasin()
       functions from the IQMath.lib library in order to utilize the
       relevant IQ Math table in Boot ROM (This saves space and Boot ROM
       is 1 wait-state). If this section is not uncommented, IQmathTables2
       will be loaded into other memory (SARAM, Flash, etc.) and will take
       up space, but 0 wait-state is possible.
    */
    /*
    IQmathTables3    : > IQTABLES3, PAGE = 0, TYPE = NOLOAD
    {

               IQmath.lib<IQNasinTable.obj> (IQmathTablesRam)

    }
    */

   /* .reset is a standard section used by the compiler.  It contains the */
   /* the address of the start of _c_int00 for C Code.   /*
   /* When using the boot ROM this section and the CPU vector */
   /* table is not needed.  Thus the default type is set here to  */
   /* DSECT  */
   .reset              : > RESET,      	PAGE = 0, TYPE = DSECT
   vectors             : > VECTORS     	PAGE = 0, TYPE = DSECT
   IsrVariableFile	   : > IsrVariable  PAGE = 1
}

/*
//===========================================================================
// End of file.
//===========================================================================
*/

